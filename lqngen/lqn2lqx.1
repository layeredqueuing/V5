.\" -*- nroff -*-
.TH lqn2lqx 1 ""  "5.13"
.\" $Id: lqn2lqx.1 16195 2022-12-23 22:03:52Z greg $
.\"
.\" --------------------------------
.SH "NAME"
lqn2lqx \- generate layered queueing network models from an existing model file.
.SH "SYNOPSIS"
.br
.B lqngen
[\fIOPTION \&.\|.\|.\fP]
[
FILE
]
.SH "DESCRIPTION"
\fBlqn2lqx\fP is used to convert an LQN input file to use either SPEX or LQX to control execution.
All constant input parameters are converted to variables initialized with the values from the original
input file.  Existing variables within the input file are not
modified.  Note however, that variables initialized in an XML input file with LQX are \fBnot\fP initialized
in the converted output file because the LQX program must be executed in order to do so.  To convert input formats without the conversion of parameters to
variables, use \fBlqn2ps\fP(1) with \fB--format\fP=\fIxml\fP (or \fIlqn\fP or 
\fIjson\fP).
.PP
\fBlqn2lqx\fP reads its input from \fIfilename\fP, specified at the
command line if present, or from the standard input otherwise.  Output
for an input file \fIfilename\fP specified on the command line will be
placed in the file \fIfilename.ext\fP, where \fI.ext\fP is \fIxlqn\fP
for SPEX conversion, \fIlqnx\fPfor LQX conversion and \fIjson\fP
for JSON conversion.
If the output file name is the same as the input file name, 
the output is written back to the original file name.
The original file is renamed to \fIfilename.ext~\fP
Output can be directed to a new file with the \fB\-\-output\fP option.
If several input files are given, then each is treated as a separate model and
output will be placed in separate output files.
.SH "OPTIONS"
.TP
\fB\-N\fR, \fB\-\-experiments=\fIARG\fR
Generate \fIARG\fP experiments within one model file. The experiments
will be run using either SPEX (for LQN input), or LQX (for XML input).
This option will turn on either \fB\-\-spex-output\fP, or \fB\-\-lqx-output\fP
depending on the output format.
.TP
\fB\-S\fR, \fB\-\-sensitivity=\fIARG\fR
Create a factorial expermiment varying all non-reference task service times by a factor of plus or minus \fIARG\fP.  This option precludes the use of \fB\-N\fP.
.TP
\fB\-O\fR, \fB\-\-format=\fIARG\fR
Set the output file format, \fIARG\fP, to: \fIxml\fP, \fIlqn\fP.
.TP
\fB\-H\fR, \fB\-\-help\fR
Print out a brief help summary and exit.
.TP
\fB\-V\fR, \fB\-\-version\fR
Print the version number of lqn2lqx.
.TP
\fB\-c\fR, \fB\-\-customers[=\fIARG]\fR
Set the \fImean\fP number of customers at each of the client reference tasks to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-customers\fP=\fImean\fP, 
\fB\-\-customers\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default discreet distribution, or \fB\-\-customers\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBdiscreet\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIpoisson\fP distribution is used.
.TP
\fB\-g\fR, \fB\-\-share[=\fIARG]\fR
Set the share of the first group running on the processor to \fIARG\fP.
The share for a group is based on the Beta distribution.
.TP
\fB\-d\fR, \fB\-\-delay-server[=\fIARG]\fR
Set the probability that a processor is a delay server to \fIARG\fP.
Tasks are not affected.
All processors that have constant multiplicities are eligible for conversion to infinite servers.
Processors whose multiplicity is set using a variable in the input file are never changed.
.TP
\fB\-i\fR, \fB\-\-infinite-server[=\fIARG]\fR
Set the probability that a server task is infinite to \fIARG\fP.
Processors are not affected.
All tasks that have constant multiplicities are eligible for conversion to infinite servers.
Tasks whose multiplicity is set using a variable in the input file are never changed.
.TP
\fB\-p\fR, \fB\-\-processor-multiplicity[=\fIARG]\fR
Set the \fImean\fP processor multiplicity for each processor to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-processor-multiplicity\fP=\fImean\fP, 
\fB\-\-processor-multiplicity\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default discreet distribution, or \fB\-\-processor-multiplicity\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBdiscreet\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIpoisson\fP distribution is used.
.TP
\fB\-s\fR, \fB\-\-service-time[=\fIARG]\fR
Set the \fImean\fP phase service time to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-service-time\fP=\fImean\fP, 
\fB\-\-service-time\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default continuous distribution, or \fB\-\-service-time\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBcontinuous\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIgamma\fP distribution is used.
.TP
\fB\-t\fR, \fB\-\-task-multiplicity[=\fIARG]\fR
Set the \fImean\fP task multiplicity for each task to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-task-multiplicity\fP=\fImean\fP, 
\fB\-\-task-multiplicity\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default discreet distribution, or \fB\-\-task-multiplicity\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBdiscreet\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIpoisson\fP distribution is used.
Tasks in the input file which are infinite servers may be converted to fixed-rate or multi-servers.
.TP
\fB\-y\fR, \fB\-\-request-rate[=\fIARG]\fR
Set the mean rendezous (synchronous call) rate to \fIARG\fP.  
\fIARG\fP can be take the form of \fB\-\-request-rate\fP=\fImean\fP, 
\fB\-\-request-rate\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default continuous distribution, or \fB\-\-request-rate\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBcontinuous\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIgamma\fP distribution is used.
.TP
\fB\-z\fR, \fB\-\-think-time[=\fIARG]\fR
Set the mean think time at reference tasks to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-think-time\fP=\fImean\fP, 
\fB\-\-think-time\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default continuous distribution, or \fB\-\-think-time\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBcontinuous\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIgamma\fP distribution is used.
.TP
\fB\-o\fR, \fB\-\-output=\fIARG\fR
Redirect output to the file named \fIARG\fP.  If \fIARG\fP is \fB-\fP,
output is redirected to \fIstdout\fP.  This option cannot be used with \fB\-\-models\fP.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Verbose output. List the actual number of Clients, Server Tasks, Processors, Entries and Calls created.
.TP
\fB\-\-json-output\fR
Output the input model in JavaScript Object Notation (JSON).
.TP
\fB\-\-xml-output\fR
Output the input model in eXtensible Markup Language (XML).
.TP
\fB\-\-lqx-output\fR
Generate LQX control code for XML output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIARG\fP is also used, loop code will be
produced to generate \fIARG\fP runs.  This option will enable XML output.
.TP
\fB\-\-spex-output\fR
Generate SPEX control code for LQN output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIARG\fP is also used, loop code will be
produce to generate \fIARG\fP runs.  This option will enable LQN
output.
.TP
\fB\-\-seed=\fIARG\fR
Set the seed value for the random number generator to \fIARG\fP.
.TP
\fB\-\-beta=\fIARG\fR
The BETA distribution is only used for choosing the share of a group when using a processor
using Completely Fair Scheduling.
Set the beta argument of the distribution to \fIARG\fP.  The alpha
argument is set based on the value of the group "share" (set using \fB\-g\fP\fIn\fP).
.TP
\fB\-\-binomial\fR
Use a Binomial distribution for all subsequent options that use a
discreet random variable generator.
.TP
\fB\-\-constant\fR
Use \fIconstant\fP values for all subsequent parameters.
.TP
\fB\-\-normal=\fIARG\fR
Set the continuous random variable generator to use a Normal
distribution with a standard deviation of \fIARG\fP for any subsequent
flag that uses a continuous distribution.
.TP
\fB\-\-gamma=\fIARG\fR
Set the continuous random variable generator to use a Gamma
distribution with a shape parameter of \fIARG\fP  for any subsequent
flag that uses a continuous distribution.  Integer values of
\fIARG\fP will generate random numbers with an Erlang distribution.  A
shape value of 1 will generate random numbers with an Exponential
distribution.
.TP
\fB\-\-poisson\fR
Use a Poisson distribution for all subsequent options that use a
discreet random variable generator.  The distribution is shifted right by one so that
the lower bound on generated values is always one.  Mean values are adjusted accordingly.
.TP
\fB\-\-uniform=\fIARG\fR
Use a uniform distribution for all subsequent options that use a
discreet or continuous random variable generator.  The spread of the
distribution is set to \fIARG\fP although this value will be
ignored if a mean value is set.  The lower bound for continuous distributions
is zero.  For discreet distributions, the lower bound is one.  The upper bound
for either distribution is set to twice the mean plus the lower bound.
.TP
\fB\-\-total-customers=\fIARG\fR
Set the total number of customers to \fIARG\fP.
\fIARG\fP can be take the form of \fB\-\-total-customers\fP=\fImean\fP, 
\fB\-\-total-customers\fP=\fIa:b\fP where \fIa\fP and \fIb\fP are parameters
for the default discreet distribution, or \fB\-\-total-customers\fP=\fIdistribution:a[:b]\fP, where 
\fIdistribution\fP is a \fBdiscreet\fP distribution, and \fIa[:b]\fP are parameters to the distribution.
By default, a \fIpoisson\fP distribution is used.
This option cannot be used with \fB\-\-customers\fP=\fIn\fP.
.TP
\fB\-\-no-variables\fR
Do not convert constant values for customers, processor and task multiplicities, service and think times and request
rates into variables.  Observation variables are not affected.  
.TP
\fB\-\-no-observation\fR
Do not insert any LQX code or spex observation variables.
.TP
\fB\-\-no-customers\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for reference task multiplicites (customers)
to variables.
.TP
\fB\-\-no-processor-multiplicity\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for processor multiplicities to variables.
.TP
\fB\-\-no-service-time\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for phase service times to variables.
.TP
\fB\-\-no-task-multiplicity\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for task multiplicities to variables.
.TP
\fB\-\-no-request-rate\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for request rates to variables.
.TP
\fB\-\-no-think-time\fR
The default operation is to convert all constants in the input file into variables.
Do not convert constant parameters for reference task (customer) think times to variables.
.TP
\fB\-\-[no-]input-parameters\fR
When generating SPEX or LQX output, either include or not include in the output the value of the parameters that change
as a result of executing the program.  Constant parameters are not included.
The default is to include the parameters.
.TP
\fB\-\-[no-]throughput\fR
Insert LQX code or SPEX observation variables to output task throughput for all ``intersting'' tasks.
Interesting tasks are those which might have contention present.
The default is to insert observation variables.
.TP
\fB\-\-[no-]residence-time\fR
Insert LQX code or SPEX observation variables to output entry service (residence) time.
The default is to insert observation variables.
.TP
\fB\-\-[no-]waiting-time\fR
Insert LQX code or SPEX observation variables to either observe or not observe the waiting time between phases and entries.
The default is to observe waiting time.
.TP
\fB\-\-[no-]utilization\fR
Insert LQX code or SPEX observation variables to either observe or not observe processor utilization for all ``interesting'' processors.
Interesting processors are those which might have contention present.
The default is to observe processor utilization.
.TP
\fB\-\-[no-]mva-steps\fR
Insert LQX code or SPEX observation variables to output the number of calls to step().
The default is to not insert observation variables.
.TP
\fB\-\-[no-]mva-waits\fR
Insert LQX code or SPEX observation variables to output the number of calls to wait().
The default is to not insert observation variables.
.TP
\fB\-\-[no-]iterations\fR
Insert LQX code or SPEX observation variables to output the number of solver iterations.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]elapsed-time\fR
Insert LQX code or SPEX observation variables to output the solver's ELAPSED time.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]user-cpu-time\fR
Insert LQX code or SPEX observation variables to output the solver's USER CPU time.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]system-cpu-time\fR
Insert LQX code or SPEX observation variables to output the solver's SYSTEM CPU time.
The default is to not insert observation variables.
.TP
\fB\-\-[no-]pragma[=\fIARG]\fR
Insert a pragma \fIARG\fP into all translated
This option can be repeated for multiple pragmas.
If the pragma was already present in the input file, it is reset to the new value.
\fB\-\-no\-pragma\fP will remove all existing pragmas.
.TP
\fB\-\-comment=\fIARG\fR
Set the model comment to \fIARG\fP.  By default, the comment is set to
the command line options of the invocation of \fBlqn2lqx\fP.
.TP
\fB\-\-convergence-value=\fIARG\fR
Set the model convergence limit to \fIARG\fP.  By default, the
convergence limit is set to 0.00001.
.TP
\fB\-\-under-relaxation=\fIARG\fR
Set the model under-relaxation to \fIARG\fP.  By default, the
under-relaxation is set to 0.9.
.TP
\fB\-\-iteration-limit=\fIARG\fR
Set the model iteration limit to \fIARG\fP.  By default, the iteration
limit is set to 50.  For models with many layers, this  value should
be higher.
.TP
\fB\-\-[no-]annotate\fR
Annotate LQN-type input files with syntax help.  This option has no effect for
XML or JSON output.  The default is to not annotate LQN model files.
.TP
\fB\-\-manual-page\fR
Generate the manual page and send the output to \fIstdout\fP.

.SH "SEE ALSO"
\fBlqn2lqx\fP(1), \fBlqns\fP(1), \fBlqsim\fP(1), \fBlqn2ps\fP(1)

.SH "EXAMPLES"
To convert an existing model file to SPEX:
.sp
.ti 0.75i
\f(CWlqn2lqx model.lqn\fP
.sp
Note that the output will be in a file named \fImodel.xlqn\fP.
.sp
To convert an existing model file to SPEX with running two experiments varying service time:
.sp
.ti 0.75i
\f(CWlqn2lqx -N2 -s2 model.lqn\fP
.sp
Note that the output will be in a file named \fImodel.xlqn\fP.
.sp
To convert an existing model file to LQX, varying the service time at all entries by 1.5x:
.sp
.ti 0.75i
\f(CWlqn2lqx --lqx-output --sensitivity=1.5 --no-customers --no-request-rate model.lqn\fP
.sp
.
.sp
To convert an existing model file to SPEX, and converting all serving tasks to infinite servers:
.sp
.ti 0.75i
\f(CWlqn2lqx --no-conversion -i1 model.lqn\fP
.sp
.
.sp
To convert an existing model file to SPEX, and converting all serving tasks to fixed rate servers:
.sp
.ti 0.75i
\f(CWlqn2lqx --no-conversion --constant -t1 model.lqn\fP
.sp
.
.sp

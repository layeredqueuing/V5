<?xml version="1.0"?>
<lqn-model name="tower" description="lqn2xml 5.5 solution for model from: tower.lqn." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/usr/local/share/lqns/lqn.xsd">
   <solver-params comment="Chapter 2: Tower Pattern" conv_val="1e-05" it_limit="50" underrelax_coeff="0.9" print_int="10">
      <pragma param="variance" value="none"/>
   </solver-params>
   <processor name="p1" scheduling="fcfs" speed-factor="1">
      <task name="t1" scheduling="ref" multiplicity="10">
         <entry name="e1" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e1_1" phase="1" host-demand-mean="1">
                  <synch-call dest="e2" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p2" scheduling="fcfs" speed-factor="1">
      <task name="t2" scheduling="fcfs" multiplicity="$m2">
         <entry name="e2" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e2_1" phase="1" host-demand-mean="$alpha_1">
                  <synch-call dest="e3" calls-mean="1"/>
               </activity>
               <activity name="e2_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p3" scheduling="fcfs" speed-factor="1">
      <task name="t3" scheduling="fcfs"  multiplicity="$m3">
         <entry name="e3" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e3_1" phase="1" host-demand-mean="$alpha_1">
                  <synch-call dest="e4" calls-mean="1"/>
               </activity>
               <activity name="e3_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p4" scheduling="fcfs" speed-factor="1">
      <task name="t4" scheduling="fcfs"  multiplicity="$m4">
         <entry name="e4" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e4_1" phase="1" host-demand-mean="$alpha_1">
                  <synch-call dest="e5_1" calls-mean="1"/>
                  <synch-call dest="e5_2" calls-mean="1"/>
                  <synch-call dest="e5_3" calls-mean="1"/>
               </activity>
               <activity name="e4_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p5_1" scheduling="fcfs" speed-factor="1">
      <task name="t5_1" scheduling="fcfs">
         <entry name="e5_1" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e5_1_1" phase="1" host-demand-mean="$alpha_1"/>
               <activity name="e5_1_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p5_2" scheduling="fcfs" speed-factor="1">
      <task name="t5_2" scheduling="fcfs">
         <entry name="e5_2" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e5_2_1" phase="1" host-demand-mean="$alpha_1"/>
               <activity name="e5_1_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="p5_3" scheduling="fcfs" speed-factor="1">
      <task name="t5_3" scheduling="fcfs">
         <entry name="e5_3" type="PH1PH2">
            <entry-phase-activities>
               <activity name="e5_3_1" phase="1" host-demand-mean="$alpha_1"/>
               <activity name="e5_1_2" phase="2" host-demand-mean="$alpha_2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <lqx>
     <![CDATA[
       n2 = [10, 6, 6, 5, 3, 1];
       n3 = [10, 6, 5, 4, 2, 1];
       n4 = [10, 6, 4, 3, 1, 1];
       alpha = [0, 1/6, 1/3, 1/2, 2/3, 5/6, 1];
       foreach( ix, m in n2 ) {
          foreach( ij, $alpha_2 in alpha ) {
	     $m2 = m;
	     $m3 = n3[ix];
	     $m4 = n4[ix];
	     $alpha_1 = 1 - $alpha_2;
	     println( ix, ": ", $m2, ", ", $m3, ", ", $m4, ", ", $alpha_1 );
	     solve();
	     println( "  Throughput:  ", task("t1").throughput );
	     println( "  Utilization: ", task("t5_1").utilization );
	  }
       }
     ]]>
   </lqx>
</lqn-model>

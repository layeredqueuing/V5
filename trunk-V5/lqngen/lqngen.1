.\" t -*- nroff -*-
.TH lqngen 1 "12 August 2013"
.\" $Id$
.\"
.\" --------------------------------
.SH "NAME"
lqngen
.SH "SYNOPSIS"
.br
.B lqngen 
[
OPTION
]... 
[
FILE
] 
.SH "DESCRIPTION"
\fBlqngen\fR is used to create an LQN input file.  If no \fIFILE\fP is
specified, the model will be output to \fIstdout\fP.  If no options
are specified, a simple annotated model consisting of one reference task, one
serving task and their respecitive processors is produced.  To create
a simple model with more layers, use the \fB\-\-layers\fP=\fIarg\fP
option.  To create a simple model with with LQX or SPEX code, use
\fB\-\-lqx-output\fP or \fB\-\-spex-output\fP respectively.
.SH "OPTIONS"
.TP
\fB\-C\fP, \fB\-\-clients\fR=\fIarg\fR
Create \fIarg\fP client \fI(reference)\fR tasks.  Use \fB\-\-customers\fP to
specify the average number of customers (copies) at each client task.
.TP
\fB\-L\fP, \fB\-\-layers\fR=\fIarg\fR
Create \fIarg\fP layers of server tasks.  The total number of layers
in the model will be \fIarg + 2\fP because one layer is used for
client tasks, and one layer will be used for one or more processors.
.TP
\fB\-M\fP, \fB\-\-models\fR=\fIarg\fR
Generate \fIarg\fP model files.  Provided some randomness is present
in layer creation (see \fB\-\-fat\fP, \fB\-\-funnel\fP,
\fB\-\-pyramid\fP, and \fB\-\-deterministic\fP), each of the model
files will likely have different topologies.
.TP
\fB\-N\fP, \fB\-\-experiments\fR=\fIarg\fR
Generate \fIarg\fP experiments within one model file. The experiments
will be run using either SPEX (for lqn input), or LQX (for XML input).
.TP
\fB\-O\fP, \fB\-\-format\fR=\fIarg\fR
Set the output file format to: \fIxml\fP, \fIlqn\fP, or \fIjson\fP.
.TP
\fB\-P\fP, \fB\-\-processors\fIarg\fR
Create  \fIarg\fP processors in each  model file.
.TP
\fB\-S\fP, \fB\-\-seed\fR=\fIarg\fR
Set the value for the random number generator to \fIarg\fP.
.TP
\fB\-T\fP, \fB\-\-tasks\fR=\fIarg\fR
Create  \fIarg\fP tasks in each  model file.  The number of tasks must
be greater than or equal to the number of layers.
.TP
\fB\-d\fP, \fB\-\-deterministic\fR
Use \fIdeterministic\fP values for all subsequent parameters and
create layers deterministically.
.TP
\fB\-e\fP, \fB\-\-entries\fP=arg\fR
Create an average of \fIarg\fP entries on each serving task.   The
number of entries created is set using the current discreet random
number generator.  
.TP
\fB\-h\fP, \fB\-\-help\fR
Print out a brief help summary and exit.
.TP
\fB\-n\fP, \fB\-\-customers\fR=\fIarg\fP
Set the \fImean\fP number of customers for each client task to \fIarg\fP.  The
number of customers created per reference task is set using the current
discreet random number generator.
\" .TP
\"  Lqn2lqx only
\" \fB\-o\fP, \fB\-\-output\fP=\fIarg\fP
\" Redirect output to the file named \fIarg\fP.  If \fIarg\fP is \fB-\fP,
\" output is redirected to \fIstdout\fP.  This option cannot be used with \fB\-\-models\fP.
.TP
\fB\-p\fR, \fB\-\-processor-multiplicity\fR=\fIarg\fP
Set the \fImean\fP processor multiplicity for each processor to
\fIarg\fP.  The
number of copies of each processor is set using the current discreet (or uniform) random number generator.
.TP
\fB\-s\fP, \fB\-\-service-time\fR=\fIarg\fP
Set the \fImean\fP  phase service time to \fIarg\fP.  The mean phase
service time is set using the current continous random number generator.
.TP
\fB\-t\fR, \fB\-\-task-multiplicity\fR=\fIarg\fP
Set the \fImean\fP task multiplicity for each task to
\fIarg\fP.  The
number of copies of each task is set using the current discreet (or uniform) random number generator.
.TP
\fB\-v\fP,  \fB\-\-verbose\fR
Verbose output (whatever that is...)
.TP
\fB\-y\fP, \fB\-\-rendezvous-rate\fR=\fIarg\fP
Send the mean rendezous (synchronous call) rate to \fIarg\fP.  
The mean rendezvous rate is set using the current continous random number generator.
.TP
\fB\-z\fP, \fB\-\-think-time\fR=\fIarg\fP
Send the mean think time at reference tasks to \fIarg\fP.  
The mean think time is set using the current continous random number generator.
.TP
\fB\-2\fP, \fB\-\-second-phase\fR
Set the probability that an entry at a server task has a second phase
to \fIarg\fP.  \fIArg\fP must be between 0 and 1.
.TP
\fB\-\-no-annotate\fP
Do not annotate LQN-type input files.  This option has no effect for
XML or JSON output.
.TP
\fB\-\-comment\fR=\fIarg\fP
Set the model comment to \fIarg\fP.  By default, the comment is set to
the command line options of the invocation of \fBlqngen\fP.
.TP
\fB\-\-under-relaxation\fR=\fIarg\fP
Set the model under-relaxation to \fIarg\fP.  By default, the
under-relaxation is set to 0.9.
.TP
\fB\-\-iteration-limit\fR=\fIarg\fP
Set the model iteration limit to \fIarg\fP.  By default, the iteration
limit is set to 50.  For models with many layers, this  value should
be higher.
.TP
\fB\-\-convergence-limit\fR=\fIarg\fP
Set the model convergence limit to \fIarg\fP.  By default, the
convergence limit is set to 0.00001.
.TP
\fB\-\-normal\fR=\fIarg\fP
Set the continuous random variable generator to use a Normal
distribution with a standard deviation of \fIarg\fP for any subsequent
flag that uses a continuous distribution.  
.TP
\fB\-\-gamma\fR=\fIarg\fP
Set the continuous random variable generator to use a Gamma
distribution with a shape parameter of \fIarg\fP  for any subsequent
flag that uses a continuous distribution.  Integer values of
\fIarg\fP will generate random numbers with an Erlang distribution.  A
shape value of 1 will generate random numbers with an Exponential
distribution.  Note that the parameter argument for subsequent
\fB\-\-service-time\fP, \fB\-\-rendezvous-rate\fP, and
\fB\-\-think-time\fP options set the distribution's \fIscale\fP value,
and not it's mean.
.TP
\fB\-\-poisson\fR
Use a Poisson distribution for all subsequent options that use a
discreet random variable generator.
.TP
\fB\-\-uniform\fR=\fIarg\fP
Use a uniform distribution for all subsequent options that use a
discreet or continuous random variable generator.  The spread of the
distribution is set to \fIarg\fP.
.TP
\fB\-\-funnel\fP
Create a model with a ``funnel'' shape, that is there are more serving
tasks at the top of the model than at the bottom.  The default is to
create a model with tasks randomly distributed among the layers.
.TP
\fB\-\-pyramid\fP
Create a model with a ``pyramid'' shape, that is there are more serving
tasks at the bottom of the model than at the top.  The default is to
create a model with tasks randomly distributed among the layers.
.TP
\fB\-\-fat\fP
Create a model with a ``fat'' shape, that is there are more serving
tasks in the middle of the model than at either the top or the bottom.
The default is to create a model with tasks randomly distributed among
the layers.
.TP
\fB\-\-json-output\fP
Output the input model in Java Script Object Notation (JSON).
.TP
\fB\-\-xml-output\fP
Output the input model in eXtensible Markup Language (XML).
.TP
\fB\-\-lqx-output\fP
Generate LQX control code for XML output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIarg\fP is also used, loop code will be
produced to generate \fIarg\fP runs.  This option will enable XML output.
.TP
\fB\-\-spex-output\fP
Generate SPEX control code for LQN output files.  Variables will be
created for all parameters set by the options above and will be
initialized using the current random number generator.  If
\fB\-\-experiments\fP=\fIarg\fP is also used, loop code will be
produce to generate \fIarg\fP runs.  This option will enable LQN
output.
.LP

.SH "SEE ALSO"
